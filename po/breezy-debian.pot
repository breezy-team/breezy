# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR Canonical Ltd. <bazaar@lists.canonical.com>
# This file is distributed under the same license as the breezy-debian package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: breezy-debian\n"
"Report-Msgid-Bugs-To: <bazaar@lists.canonical.com>\n"
"POT-Creation-Date: 2022-02-22 11:38+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#: __init__.py:231
#, python-format
msgid ""
"Not attempting to fix packaging branch ancestry, missing pristine tar data "
"for version %s."
msgstr ""

#: cmds.py:123
msgid ""
"There are uncommitted changes in the working tree. You must commit before "
"using this command"
msgstr ""

#: cmds.py:146
#, python-format
msgid "No distribution specified, and no changelog, assuming '%s'"
msgstr ""

#: cmds.py:156
#, python-format
msgid "Using distribution %s"
msgstr ""

#: cmds.py:159
#, python-format
msgid ""
"No distribution specified, and no previous distribution in changelog. "
"Assuming '%s'"
msgstr ""

#: cmds.py:166
#, python-format
msgid "Unknown target distribution: %s"
msgstr ""

#: cmds.py:271
#, python-format
msgid "Building package in %s mode"
msgstr ""

#: cmds.py:391
msgid "Building using working tree"
msgstr ""

#: cmds.py:399
msgid "bzr builddeb --revision takes exactly one revision specifier."
msgstr ""

#: cmds.py:401
#, python-format
msgid "Building branch from revision %s"
msgstr ""

#: cmds.py:507
#, python-format
msgid "Unable to parse upstream metadata file %s: %s"
msgstr ""

#: cmds.py:510
msgid "Reusing existing build dir"
msgstr ""

#: cmds.py:522
#, python-format
msgid "Unable to parse changelog: %s"
msgstr ""

#: cmds.py:651
#, python-format
msgid "Tar now in %s"
msgstr ""

#: cmds.py:833
msgid "Merge upstream in native mode is not supported."
msgstr ""

#: cmds.py:844
#, python-format
msgid "Using upstream branch %s (from configuration)"
msgstr ""

#: cmds.py:895
msgid "--snapshot requires an upstream branch source"
msgstr ""

#: cmds.py:904
msgid ""
"no upstream source location known; add watch file or specify upstream "
"repository?"
msgstr ""

#: cmds.py:911
msgid "--revision can only be used with a valid upstream branch"
msgstr ""

#: cmds.py:915
msgid "merge-upstream takes only a single --revision"
msgstr ""

#: cmds.py:932
msgid ""
"You must specify the version number using --version or specify --snapshot to "
"merge a snapshot from the upstream branch."
msgstr ""

#: cmds.py:938
msgid "You must specify the version number using --version."
msgstr ""

#: cmds.py:940
#, python-format
msgid "Using version string %s."
msgstr ""

#: cmds.py:988
#, python-format
msgid "Upstream version %s has already been merged."
msgstr ""

#: cmds.py:994
msgid "An entry for the new upstream version has been added to the changelog."
msgstr ""

#: cmds.py:997
msgid "The new upstream version has been imported."
msgstr ""

#: cmds.py:999
msgid ""
"You should now resolve the conflicts, review the changes, and then commit."
msgstr ""

#: cmds.py:1002
msgid "You should now review the changes and then commit."
msgstr ""

#: cmds.py:1078
msgid "There is no tree to import the packages in to"
msgstr ""

#: cmds.py:1093
msgid ""
"You must give the location of at least one source package to install, or use "
"the --file option."
msgstr ""

#: cmds.py:1099
msgid "import-dsc in merge mode is not yet supported."
msgstr ""

#: cmds.py:1116
#, python-format
msgid ""
"Unable to find the tag for the previous upstream version (%(version)s) in "
"the branch. Consider importing it via import-upstream. If it is already "
"present in the branch please make sure it is tagged as %(tag)r."
msgstr ""

#: cmds.py:1202
#, python-format
msgid "Version %s is already present."
msgstr ""

#: cmds.py:1233
msgid "bzr import-upstream --revision takes exactly one revision specifier."
msgstr ""

#: cmds.py:1243
#, python-format
msgid "Imported %(location)s as tag:%(tag)s.\n"
msgstr ""

#: cmds.py:1247
#, python-format
msgid "Imported %(location)s (%(component)s) as tag:%(tag)s.\n"
msgstr ""

#: cmds.py:1328
msgid ""
"This command only works for merge mode packages. See /usr/share/doc/bzr-"
"builddeb/user_manual/merge.html for more information."
msgstr ""

#: cmds.py:1365
#, python-format
msgid "Running \"%s\" in the exported directory."
msgstr ""

#: cmds.py:1367
msgid ""
"If you want to cancel your changes then exit with a non-zero exit code, e.g. "
"run \"exit 1\"."
msgstr ""

#: cmds.py:1375
msgid "Not updating the working tree as the command failed."
msgstr ""

#: cmds.py:1382
msgid "After build processing failed. Aborting."
msgstr ""

#: cmds.py:1383
msgid "Copying debian/ back"
msgstr ""

#: cmds.py:1396
msgid "Copying back debian/ failed"
msgstr ""

#: cmds.py:1398
msgid ""
"If any files were added or removed you should run \"bzr add\" or \"bzr rm\" "
"as appropriate."
msgstr ""

#: cmds.py:1434
msgid ""
"The changelog still targets 'UNRELEASED', so apparently hasn't been uploaded."
msgstr ""

#: cmds.py:1442
msgid ""
"This version has already been marked uploaded. Use --force to force marking "
"this new version."
msgstr ""

#: cmds.py:1446
#, python-format
msgid "Tag '%s' created.\n"
msgstr ""

#: cmds.py:1513
msgid "No unmerged revisions"
msgstr ""

#: upstream/branch.py:481
#, python-format
msgid "No upstream upstream-revision format specified, trying %s"
msgstr ""

#: upstream/branch.py:536
msgid "No upstream releases found, falling back to snapshot."
msgstr ""

# help of 'dont-purge' option of 'builddeb' command
#: cmds.py:67
msgid "Don't purge the build directory after building."
msgstr ""

# help of 'result-dir' option of 'builddeb' command
#: cmds.py:70
msgid "Directory in which to place the resulting package files."
msgstr ""

# help of 'builder' option of 'builddeb' command
#: cmds.py:74
msgid "Command to build the package."
msgstr ""

# help of 'merge' option of 'builddeb' command
#: cmds.py:78
msgid "Merge the debian part of the source in to the upstream tarball."
msgstr ""

# help of 'split' option of 'builddeb' command
#: cmds.py:81
msgid "Automatically create an .orig.tar.gz from a full source branch."
msgstr ""

# help of 'build-dir' option of 'builddeb' command
#: cmds.py:84
msgid "The dir to use for building."
msgstr ""

# help of 'orig-dir' option of 'builddeb' command
#: cmds.py:87
msgid ""
"Directory containing the .orig.tar.gz files. For use when only debian/ is "
"versioned."
msgstr ""

# help of 'native' option of 'builddeb' command
#: cmds.py:92
msgid "Build a native package."
msgstr ""

# help of 'export-upstream' option of 'builddeb' command
#: cmds.py:95
msgid "Create the .orig.tar.gz from specified bzr branch before building."
msgstr ""

# help of 'export-upstream-revision' option of 'builddeb' command
#: cmds.py:99
msgid "Select the upstream revision that will be exported."
msgstr ""

#: cmds.py:300
msgid "Builds a Debian package from a branch."
msgstr ""

#: cmds.py:302
msgid ""
"If BRANCH is specified it is assumed that the branch you wish to build is\n"
"located there. If it is not specified then the current directory is used."
msgstr ""

#: cmds.py:305
msgid ""
"By default, if a working tree is found, it is used to build. Otherwise the\n"
"last committed revision found in the branch is used. To force building the\n"
"last committed revision use --revision -1. You can also specify any other\n"
"revision with the --revision option."
msgstr ""

#: cmds.py:310
msgid ""
"If you only wish to export the package, and not build it (especially useful\n"
"for merge mode), use --export-only."
msgstr ""

#: cmds.py:313
msgid ""
"To leave the build directory when the build is completed use --dont-purge."
msgstr ""

#: cmds.py:315
msgid ""
"Specify the command to use when building using the --builder option, by\n"
"default \"debuild\" is used. It can be overriden by setting the \"builder\"\n"
"variable in you configuration. You can specify extra options to build with\n"
"by adding them to the end of the command, after using \"--\" to indicate "
"the\n"
"end of the options to builddeb itself. The builder that you specify must\n"
"accept the options you provide at the end of its command line."
msgstr ""

#: cmds.py:322
msgid ""
"You can also specify directories to use for different things. --build-dir\n"
"is the directory to build the packages beneath, which defaults to\n"
"'../build-area'. '--orig-dir' specifies the directory that contains the\n"
".orig.tar.gz files , which defaults to '..'. '--result-dir' specifies where\n"
"the resulting package files should be placed, which defaults to '..'.\n"
"--result-dir will have problems if you use a build command that places\n"
"the results in a different directory."
msgstr ""

#: cmds.py:330
msgid ""
"The --reuse option will be useful if you are in merge mode, and the\n"
"upstream tarball is very large. It attempts to reuse a build directory from\n"
"an earlier build. It will fail if one doesn't exist, but you can create one\n"
"by using --export-only."
msgstr ""

#: cmds.py:335
msgid ""
"--quick allows you to define a quick-builder in your configuration files,\n"
"which will be used when this option is passed. It defaults to 'fakeroot\n"
"debian/rules binary'. It is overriden if --builder is passed. Using this\n"
"and --reuse allows for fast rebuilds."
msgstr ""

# help of 'export-only' option of 'builddeb' command
#: cmds.py:340
msgid "Export only, don't build."
msgstr ""

# help of 'use-existing' option of 'builddeb' command
#: cmds.py:343
msgid "Use an existing build directory."
msgstr ""

# help of 'quick' option of 'builddeb' command
#: cmds.py:344
msgid ""
"Quickly build the package, uses quick-builder, which defaults to \"fakeroot "
"debian/rules binary\"."
msgstr ""

# help of 'reuse' option of 'builddeb' command
#: cmds.py:347
msgid ""
"Try to avoid exporting too much on each build. Only works in merge mode; it "
"saves unpacking the upstream tarball each time. Implies --dont-purge and --"
"use-existing."
msgstr ""

# help of 'source' option of 'builddeb' command
#: cmds.py:351
msgid "Build a source package."
msgstr ""

# help of 'package-merge' option of 'builddeb' command
#: cmds.py:358
msgid ""
"Build using the appropriate -v and -sa options for merging in the changes "
"from another source."
msgstr ""

#: cmds.py:598
msgid "Gets the upstream tar file for the packaging branch."
msgstr ""

# help of 'directory' option of 'get-orig-source' command
#: cmds.py:602
msgid "Directory from which to retrieve the packaging data"
msgstr ""

#: cmds.py:655
msgid "Merges a new upstream version into the current branch."
msgstr ""

#: cmds.py:657
msgid ""
"Takes a new upstream version and merges it in to your branch, so that your\n"
"packaging changes are applied to the new version."
msgstr ""

#: cmds.py:660
msgid ""
"You must supply the source to import from, and in some cases\n"
"the version number of the new release. The source can be a .tar.gz, .tar,\n"
".tar.bz2, .tar.xz, .tgz or .zip archive, a directory or a branch. The\n"
"source may also be a remote file described by a URL."
msgstr ""

#: cmds.py:665
msgid ""
"In most situations the version can be guessed from the upstream source.\n"
"If the upstream version can not be guessed or if it is guessed\n"
"incorrectly then the version number can be specified with --version."
msgstr ""

#: cmds.py:669
msgid ""
"The distribution this version is targetted at can be specified with\n"
"--distribution. This will be used to guess the version number suffix\n"
"that you want, but you can always correct it in the resulting\n"
"debian/changelog."
msgstr ""

#: cmds.py:674
msgid ""
"If there is no debian changelog in the branch to retrieve the package\n"
"name from then you must pass the --package option. If this version\n"
"will change the name of the source package then you can use this option\n"
"to set the new name."
msgstr ""

#: cmds.py:681
msgid ""
"    bzr merge-upstream --version 0.2             http://example.org/releases/"
"scruff-0.2.tar.gz"
msgstr ""

#: cmds.py:683
msgid ""
"If you are merging a branch as well as the tarball then you can\n"
"specify the branch after the tarball, along with -r to specify the\n"
"revision of that branch to take::"
msgstr ""

#: cmds.py:687
msgid ""
"    bzr merge-upstream --version 0.2             http://example.org/releases/"
"scruff-0.2.tar.gz             http://scruff.org/bzr/scruff.dev -r tag:0.2"
msgstr ""

#: cmds.py:689
msgid ""
"If there is no upstream release tarball, and you want bzr-builddeb to\n"
"create the tarball for you::"
msgstr ""

#: cmds.py:692
msgid "    bzr merge-upstream --version 0.2 http://scruff.org/bzr/scruff.dev"
msgstr ""

#: cmds.py:694
msgid ""
"Note that the created tarball is just the same as the contents of\n"
"the branch at the specified revision. If you wish to have something\n"
"different, for instance the results of running \"make dist\", then you\n"
"should create the tarball first, and pass it to the command as in\n"
"the second example."
msgstr ""

# help of 'package' option of 'merge-upstream' command
#: cmds.py:706
msgid "The name of the source package."
msgstr ""

# help of 'version' option of 'merge-upstream' command
#: cmds.py:710
msgid "The upstream version number of this release, for example \"0.2\"."
msgstr ""

# help of 'distribution' option of 'merge-upstream' command
#: cmds.py:713
msgid "The distribution that this release is targetted at."
msgstr ""

# help of 'directory' option of 'merge-upstream' command
#: cmds.py:716
msgid "Working tree into which to merge."
msgstr ""

# help of 'last-version' option of 'merge-upstream' command
#: cmds.py:719
msgid "The full version of the last time upstream was merged."
msgstr ""

# help of 'force' option of 'merge-upstream' command
#: cmds.py:722
msgid "Force a merge even if the upstream branch has not changed."
msgstr ""

# help of 'snapshot' option of 'merge-upstream' command
#: cmds.py:725
msgid ""
"Merge a snapshot from the upstream branch rather than a new upstream release."
msgstr ""

# help of 'force-pristine-tar' option of 'merge-upstream' command
#: cmds.py:730
msgid "Force the use of pristine-tar, even if no pristine-tar branch exists"
msgstr ""

# help of 'dist-command' option of 'merge-upstream' command
#: cmds.py:735
msgid "Command to run for creating an upstream tarball from a VCS snapshot."
msgstr ""

# help of 'guess-upstream-branch-url' option of 'builddeb' command
#: cmds.py:740
msgid "Guess upstream branch URL if unknown (requires upstream-ontologist)"
msgstr ""

#: cmds.py:1007
msgid "Import a series of source packages."
msgstr ""

#: cmds.py:1009
msgid ""
"Provide a number of source packages (.dsc files), and they will\n"
"be imported to create a branch with history that reflects those\n"
"packages."
msgstr ""

#: cmds.py:1013
msgid ""
"The first argument is the distribution that these source packages\n"
"were uploaded to, one of \"debian\" or \"ubuntu\". It can also\n"
"be the target distribution from the changelog, e.g. \"unstable\",\n"
"which will be resolved to the correct distribution."
msgstr ""

#: cmds.py:1018
msgid ""
"You can also specify a file (possibly remote) that contains a\n"
"list of source packages (.dsc files) to import using the --file\n"
"option. Each line is taken to be a URI or path to import. The\n"
"sources specified in the file are used in addition to those\n"
"specified on the command line."
msgstr ""

#: cmds.py:1024
msgid ""
"If you have an existing branch containing packaging and you want to\n"
"import a .dsc from an upload done from outside the version control\n"
"system you can use this command."
msgstr ""

# help of 'file' option of 'import-dsc' command
#: cmds.py:1031
msgid "File containing URIs of source packages to import."
msgstr ""

#: cmds.py:1135
msgid "Imports an upstream tarball."
msgstr ""

#: cmds.py:1137
msgid ""
"This will import an upstream tarball in to your branch, but not modify the\n"
"working tree. Use merge-upstream if you wish to directly merge the new\n"
"upstream version in to your tree."
msgstr ""

#: cmds.py:1141
msgid ""
"The imported revision can be accessed using the tag name that will be\n"
"reported at the end of a successful operation. The revision will include\n"
"the pristine-tar data that will allow other commands to recreate the\n"
"tarball when needed."
msgstr ""

#: cmds.py:1146
msgid "For instance::"
msgstr ""

#: cmds.py:1148
msgid "    $ bzr import-upstream 1.2.3 ../package_1.2.3.orig.tar.gz"
msgstr ""

#: cmds.py:1150
msgid ""
"If upstream is packaged in bzr, you should provide the upstream branch\n"
"whose tip commit is the closest match to the tarball::"
msgstr ""

#: cmds.py:1153
msgid ""
"    $ bzr import-upstream 1.2.3 ../package_1.2.3.orig.tar.gz ../upstream"
msgstr ""

#: cmds.py:1155
msgid ""
"After doing this, commands that assume there is an upstream tarball, like\n"
"'bzr builddeb' will be able to recreate the one provided at import-upstream\n"
"time, meaning that you don't need to distribute the tarball in addition to\n"
"the branch."
msgstr ""

#: cmds.py:1160
msgid "If you want to manually merge with the imported upstream, you can do::"
msgstr ""

#: cmds.py:1162
msgid "    $ bzr merge . -r tag:upstream-1.2.3"
msgstr ""

#: cmds.py:1164
msgid ""
"The imported revision will have file ids taken from your branch, the\n"
"upstream branch, or previous tarball imports as necessary. In addition\n"
"the parents of the new revision will be the previous upstream tarball\n"
"import and the tip of the upstream branch if you supply one."
msgstr ""

# help of 'force-pristine-tar' option of 'import-upstream' command
#: cmds.py:1174
msgid ""
"Force creation of a new pristine-tar branch, even if one does not exist."
msgstr ""

#: cmds.py:1255
msgid "Run a command in an exported package, copying the result back."
msgstr ""

#: cmds.py:1257
msgid ""
"For a merge mode package the full source is not available, making some\n"
"operations difficult. This command allows you to run any command in an\n"
"exported source directory, copying the resulting debian/ directory back\n"
"to your branch if the command is successful."
msgstr ""

#: cmds.py:1262
msgid "For instance:"
msgstr ""

#: cmds.py:1264
msgid "  bzr builddeb-do"
msgstr ""

#: cmds.py:1266
msgid ""
"will run a shell in the unpacked source. Any changes you make in the\n"
"``debian/`` directory (and only those made in that directory) will be\n"
"copied back to the branch. If you exit with a non-zero exit code (e.g.\n"
"\"exit 1\"), then the changes will not be copied back."
msgstr ""

#: cmds.py:1271
msgid "You can also specify single commands to be run, e.g."
msgstr ""

#: cmds.py:1273
msgid "  bzr builddeb-do \"dpatch-edit-patch 01-fix-build\""
msgstr ""

#: cmds.py:1275
msgid ""
"Note that only the first argument is used as the command, and so the above\n"
"example had to be quoted."
msgstr ""

# help of 'no-preparation' option of 'builddeb-do' command
#: cmds.py:1281
msgid "Don't apply/unapply patches."
msgstr ""

#: cmds.py:1450
msgid "Format the changes in a branch as a DEP-3 patch."
msgstr ""

#: cmds.py:1452
msgid ""
"This will generate a patch file containing as much information\n"
"specified by DEP-3 (http://dep.debian.net/deps/dep3/) as possible."
msgstr ""

#: cmds.py:1455
msgid ""
"The patch will contain all changes that are not merged into\n"
"the current branch (either that in the current working directory\n"
"or specified by --directory) but are present and committed\n"
"in the branch at the specified location."
msgstr ""

#: cmds.py:1460
msgid ""
"To generate the \"Status\" header, this command will check the\n"
"upstream branch to verify if the change has made it upstream,\n"
"unless --no-upstream-check was specified."
msgstr ""

#: cmds.py:1464
msgid "examples::"
msgstr ""

#: cmds.py:1466
msgid ""
"    bzr dep3-patch lp:~user/project/feature-branch > \\\n"
"            debian/patches/01_feature"
msgstr ""

# help of 'directory' option of 'dep3-patch' command
#: cmds.py:1473
msgid "Packaging tree for which to generate patch."
msgstr ""

# help of 'no-upstream-check' option of 'dep3-patch' command
#: cmds.py:1478
msgid "Don't check whether patch has been merged upstream."
msgstr ""

#: cmds.py:1614
msgid "Release a new version of a package."
msgstr ""

#: cmds.py:1616
msgid ""
"This will update the latest distribution in the changelog,\n"
"build the package and upload."
msgstr ""

#: cmds.py:1619
msgid "Location can be remote."
msgstr ""

# help of 'strict' option of 'builddeb' command
#: cmds.py:1624
msgid ""
"Refuse to build if there are unknown files in the working tree, --no-strict "
"disables the check."
msgstr ""

# help of 'skip-upload' option of 'debrelease' command
#: cmds.py:1630
msgid "Skip upload."
msgstr ""
