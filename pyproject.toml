[build-system]
requires = [
    "setuptools>=60",
    "setuptools-rust",
    "setuptools-gettext>=0.1.4",
    "cython>=0.29",
]
build-backend = "setuptools.build_meta"

[project]
name = "breezy"
maintainers = [{name = "Breezy Developers", email = "team@breezy-vcs.org"}]
description = "Friendly distributed version control system"
readme = "README.rst"
license = {text = "GNU GPL v2"}
classifiers = [
    "Development Status :: 6 - Mature",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: GNU General Public License (GPL)",
    "Operating System :: OS Independent",
    "Operating System :: POSIX",
    "Programming Language :: Python",
    "Programming Language :: C",
    "Topic :: Software Development :: Version Control",
]
requires-python = ">=3.9"
dependencies = [
    "configobj",
    "fastbencode",
    "patiencediff",
    "merge3",
    "dulwich>=0.21.6",
    "urllib3>=1.24.1",
    "pyyaml",
]
dynamic = ["version", "scripts"]

[project.urls]
Homepage = "https://www.breezy-vcs.org/"
Download = "https://launchpad.net/brz/+download"

[project.optional-dependencies]
fastimport = ["fastimport"]
git = ["dulwich>=0.21.6"]
launchpad = ["launchpadlib>=1.6.3"]
workspace = ["pyinotify"]
doc = [
    "docutils",
    "setuptools",
    "sphinx",
    "sphinx_epytext",
]
pgp = ["gpg"]
github = ["github"]
paramiko = ["paramiko>=1.6.2"]
subunit = ["python-subunit"]
dev = [
    "testtools>=0.9.5",
    "testscenarios",
    "python-subunit",
    "cython>=0.29",
    "ruff",
    "types-paramiko",
    "types-PyYAML",
]
testing = [
    "testtools",
    "testscenarios",
    "python-subunit",
    "dulwich>=0.21.6",
]

[tool.setuptools]
zip-safe = false
include-package-data = false

[tool.setuptools.packages.find]
include = ["breezy*"]
namespaces = false

[tool.setuptools.package-data]
breezy = [
    "doc/api/*.txt",
    "tests/test_patches_data/*",
    "help_topics/en/*.txt",
    "tests/ssl_certs/ca.crt",
    "tests/ssl_certs/server_without_pass.key",
    "tests/ssl_certs/server_with_pass.key",
    "tests/ssl_certs/server.crt",
    "py.typed",
]

[tool.setuptools.dynamic]
version = {attr = "breezy.__version__"}

[tool.mypy]
ignore_missing_imports = true

[tool.ruff]
extend-exclude = ["lib", "bin"]

[tool.ruff.lint]
select = [
    "ANN",  # annotations
    "D",  # pydocstyle
    "E",  # pycodestyle
    "F",  # pyflakes
    "N",  # naming
    "B",  # bugbear
    "I",  # isort
    "S",  # bandit
    "TCH", # typecheck
    "INT", # gettext
   "SIM", # simplify
    "C4",  # comprehensions
    "UP",  # pyupgrade
    "RUF", # ruf-specific
]
ignore = [
    "ANN001",
    "ANN002",
    "ANN003",  # missing-type-arg
    "ANN101",  # missing-type-self
    "ANN102",  # missing-type-self
    "ANN201",
    "ANN202",
    "ANN204",
    "ANN205",
    "ANN206",
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D103",  # Missing docstring in public function
    "D105",  # Missing docstring in magic method
    "D102",  # Missing docstring in public method
    "D205",  # 1 blank line required between summary line and description
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in __init__
    "D417",  # Missing argument descriptions in the docstring
    "F821",  # undefined-name
    "E501",  # line too long
    "D402",  # Missing blank line after last section
    "E402",  # module level import not at top of file
    "E741",  # ambiguous variable name
    "F405",  # name may be undefined, or defined from star imports
    "N801",  # Naming convention violation: invalid constant name
    "N802",  # Naming convention violation: invalid variable name
    "N804",  # Naming convention violation: invalid lowercase variable name
    "N806",  # Naming convention violation: invalid lowercase function name
    "N818",  # Naming convention violation: invalid argument name
    "N999",  # Naming convention violation: invalid module name

    "S602",  # subprocess with shell=True
    "S603",  # check for execution of untrusted input
    "S105",  # "hardcoded password"; false positives on "pwd"
    "S106",  # "hardcoded password"; false positives on "pwd"
    "S110",  # "consider logging exception"

    "S317",  # use defusedxml

    # This triggers for docstrings that uses __doc__
    "D104", # Missing docstring in public package

    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF005", # Consider iterable concatenation instead of list concatenation
    "RUF015", # Prefer next() of single slice access

    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "SIM105", # Use `contextlib.suppress
    "SIM108", # Use ternary operator
    "SIM114", # Combine `if` branches using logical `or` operator
    "SIM115", # Use context handler for opening files

    # This is unsafe for breezy, where several objects (e.g. VersionedFiles)
    # have a keys() method but no __iter__
    "SIM118", # Use `key in dict` instead of `key in dict.keys()`
    "UP032", #  Use f-string instead of `format` call; f-strings break gettext
]
# These are actually fine, but they make mypy more strict and then it fails.
unfixable = ["ANN204"]

[tool.ruff.lint.extend-per-file-ignores]
"breezy/plugins/po_merge/tests/test_po_merge.py" = ["RUF001"]


[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.setuptools-gettext]
build_dir = "breezy/locale"
